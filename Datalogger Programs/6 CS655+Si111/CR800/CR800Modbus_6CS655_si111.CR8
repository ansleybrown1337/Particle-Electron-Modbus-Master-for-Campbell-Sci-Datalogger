'CR800 Series
'Created by Short Cut (4.0)

'Declare Variables and Units
Dim TT_K
Dim SBT_K
Dim m
Dim b
Public BattV
Public PTemp_C
Public CS65X(6)
Public CS65X_2(6)
Public CS65X_3(6)
Public CS65X_4(6)
Public CS65X_5(6)
Public CS65X_6(6)
Public TT_C
Public SBT_C
Public TTmV
Public Modbus(14) As Long
Public ModbusCoil(8) As Boolean

Alias CS65X(1)=VWC
Alias CS65X(2)=EC
Alias CS65X(3)=T
Alias CS65X(4)=P
Alias CS65X(5)=PA
Alias CS65X(6)=VR
Alias CS65X_2(1)=VWC_2
Alias CS65X_2(2)=EC_2
Alias CS65X_2(3)=T_2
Alias CS65X_2(4)=P_2
Alias CS65X_2(5)=PA_2
Alias CS65X_2(6)=VR_2
Alias CS65X_3(1)=VWC_3
Alias CS65X_3(2)=EC_3
Alias CS65X_3(3)=T_3
Alias CS65X_3(4)=P_3
Alias CS65X_3(5)=PA_3
Alias CS65X_3(6)=VR_3
Alias CS65X_4(1)=VWC_4
Alias CS65X_4(2)=EC_4
Alias CS65X_4(3)=T_4
Alias CS65X_4(4)=P_4
Alias CS65X_4(5)=PA_4
Alias CS65X_4(6)=VR_4
Alias CS65X_5(1)=VWC_5
Alias CS65X_5(2)=EC_5
Alias CS65X_5(3)=T_5
Alias CS65X_5(4)=P_5
Alias CS65X_5(5)=PA_5
Alias CS65X_5(6)=VR_5
Alias CS65X_6(1)=VWC_6
Alias CS65X_6(2)=EC_6
Alias CS65X_6(3)=T_6
Alias CS65X_6(4)=P_6
Alias CS65X_6(5)=PA_6
Alias CS65X_6(6)=VR_6

Units BattV=Volts
Units PTemp_C=Deg C
Units TT_C=Deg C
Units SBT_C=Deg C
Units VWC=m^3/m^3
Units EC=dS/m
Units T=Deg C
Units P=unitless
Units PA=nSec
Units VR=unitless
Units VWC_2=m^3/m^3
Units EC_2=dS/m
Units T_2=Deg C
Units P_2=unitless
Units PA_2=nSec
Units VR_2=unitless
Units VWC_3=m^3/m^3
Units EC_3=dS/m
Units T_3=Deg C
Units P_3=unitless
Units PA_3=nSec
Units VR_3=unitless
Units VWC_4=m^3/m^3
Units EC_4=dS/m
Units T_4=Deg C
Units P_4=unitless
Units PA_4=nSec
Units VR_4=unitless
Units VWC_5=m^3/m^3
Units EC_5=dS/m
Units T_5=Deg C
Units P_5=unitless
Units PA_5=nSec
Units VR_5=unitless
Units VWC_6=m^3/m^3
Units EC_6=dS/m
Units T_6=Deg C
Units P_6=unitless
Units PA_6=nSec
Units VR_6=unitless

'Define Data Tables
DataTable(Hourly,True,-1)
	DataInterval(0,60,Min,10)
	Average(1,VWC,FP2,False)
	Average(1,EC,FP2,False)
	Average(1,T,FP2,False)
	Average(1,P,FP2,False)
	Average(1,PA,FP2,False)
	Average(1,VWC_2,FP2,False)
	Average(1,EC_2,FP2,False)
	Average(1,T_2,FP2,False)
	Average(1,P_2,FP2,False)
	Average(1,PA_2,FP2,False)
	Average(1,VWC_3,FP2,False)
	Average(1,EC_3,FP2,False)
	Average(1,T_3,FP2,False)
	Average(1,P_3,FP2,False)
	Average(1,PA_3,FP2,False)
	Average(1,VWC_4,FP2,False)
	Average(1,EC_4,FP2,False)
	Average(1,T_4,FP2,False)
	Average(1,P_4,FP2,False)
	Average(1,PA_4,FP2,False)
	Average(1,VWC_5,FP2,False)
	Average(1,EC_5,FP2,False)
	Average(1,T_5,FP2,False)
	Average(1,P_5,FP2,False)
	Average(1,PA_5,FP2,False)
	Average(1,VWC_6,FP2,False)
	Average(1,EC_6,FP2,False)
	Average(1,T_6,FP2,False)
	Average(1,P_6,FP2,False)
	Average(1,PA_6,FP2,False)
	Average(1,TT_C,FP2,False)
	Average(1,SBT_C,FP2,False)
EndTable

DataTable(Daily,True,-1)
	DataInterval(0,1440,Min,10)
	Minimum(1,BattV,FP2,False,False)
	Average(1,VWC,FP2,False)
	Average(1,EC,FP2,False)
	Average(1,T,FP2,False)
	Average(1,P,FP2,False)
	Average(1,PA,FP2,False)
	Average(1,VWC_2,FP2,False)
	Average(1,EC_2,FP2,False)
	Average(1,T_2,FP2,False)
	Average(1,P_2,FP2,False)
	Average(1,PA_2,FP2,False)
	Average(1,VWC_3,FP2,False)
	Average(1,EC_3,FP2,False)
	Average(1,T_3,FP2,False)
	Average(1,P_3,FP2,False)
	Average(1,PA_3,FP2,False)
	Average(1,VWC_4,FP2,False)
	Average(1,EC_4,FP2,False)
	Average(1,T_4,FP2,False)
	Average(1,P_4,FP2,False)
	Average(1,PA_4,FP2,False)
	Average(1,VWC_5,FP2,False)
	Average(1,EC_5,FP2,False)
	Average(1,T_5,FP2,False)
	Average(1,P_5,FP2,False)
	Average(1,PA_5,FP2,False)
	Average(1,VWC_6,FP2,False)
	Average(1,EC_6,FP2,False)
	Average(1,T_6,FP2,False)
	Average(1,P_6,FP2,False)
	Average(1,PA_6,FP2,False)
	Average(1,TT_C,FP2,False)
	Average(1,SBT_C,FP2,False)
EndTable

'Main Program
BeginProg
	'Use SerialOpen to set RS232 options for Modbus Slave Instruction
	 SerialOpen(COMRS232,9600,3,0,1000)
	'Modbus Slave Instruction
	ModbusSlave(COMRS232,9600,1,Modbus(),ModbusCoil(),1)

	'Main Scan
	Scan(15,Min,1,0)
		'Default CR800 Datalogger Battery Voltage measurement 'BattV'
		Battery(BattV)
		'Default CR800 Datalogger Wiring Panel Temperature measurement 'PTemp_C'
		PanelTemp(PTemp_C,_60Hz)
		'CS650/655 Water Content Reflectometer measurements 'VWC', 'EC', 'T','P', 'PA', and 'VR'
		SDI12Recorder(CS65X(),1,"0","M4!",1,0,-1)
		'CS650/655 Water Content Reflectometer measurements 'VWC_2', 'EC_2', 'T_2','P_2', 'PA_2', and 'VR_2'
		SDI12Recorder(CS65X_2(),1,"1","M4!",1,0,-1)
		'CS650/655 Water Content Reflectometer measurements 'VWC_3', 'EC_3', 'T_3','P_3', 'PA_3', and 'VR_3'
		SDI12Recorder(CS65X_3(),1,"2","M4!",1,0,-1)
		'CS650/655 Water Content Reflectometer measurements 'VWC_4', 'EC_4', 'T_4','P_4', 'PA_4', and 'VR_4'
		SDI12Recorder(CS65X_4(),1,"3","M4!",1,0,-1)
		'CS650/655 Water Content Reflectometer measurements 'VWC_5', 'EC_5', 'T_5','P_5', 'PA_5', and 'VR_5'
		SDI12Recorder(CS65X_5(),1,"4","M4!",1,0,-1)
		'CS650/655 Water Content Reflectometer measurements 'VWC_6', 'EC_6', 'T_6','P_6', 'PA_6', and 'VR_6'
		SDI12Recorder(CS65X_6(),1,"5","M4!",1,0,-1)
		'SI-111 Precision Infrared Radiometer measurements 'TT_C' and 'SBT_C'
		'Measure SI-111 sensor body thermistor temperature
		Therm109(SBT_C,1,1,1,0,_60Hz,1,0)
		'Measure SI-111 output of thermopile
		VoltDiff(TTmV,1,mV2_5,2,True,0,_60Hz,1,0,)
		'Calculate slope (m) and offset (b) coefficients for target temperature calculation
		m=0+(0*SBT_C)+(0*SBT_C^2)
		b=0+(0*SBT_C)+(0*SBT_C^2)
		'Calculate target temperature using calculated slope (m) and offset (b)
		SBT_K=SBT_C+273.15
		TT_K=SBT_K^4+TTmV*m+b
		TT_K=SQR(SQR(TT_K))
		'Convert target temperature into desired units
		TT_C=TT_K-273.15
		'Call Data Tables and Store Data
		CallTable Hourly
		CallTable Daily
		'Copy values/measurements to Modbus Array
		Modbus(1)=VWC * 100
		Modbus(2)=EC * 100
		Modbus(3)=T * 100
		Modbus(4)=P * 100
		Modbus(5)=VWC_2 * 100
		Modbus(6)=EC_2 * 100
		Modbus(7)=T_2 * 100
		Modbus(8)=P_2 * 100
		Modbus(9)=VWC_3 * 100
		Modbus(10)=EC_3 * 100
		Modbus(11)=T_3 * 100
		Modbus(12)=P_3 * 100
		Modbus(13)=TT_C * 100
		Modbus(14)=SBT_C * 100
	NextScan
EndProg
